[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
  set helplang=ja,en
  nnoremap <silent> <F1> :help@ja<Cr>
  inoremap <silent> <F1> <ESC>:help@ja<Cr>
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'scrooloose/syntastic.git'
hook_post_update = '''
  " LaTeXでのチェックが厳しすぎるからOffに
  let g:syntastic_ignore_files=['\.tex$']
  " ファイルオープン時はエラーチェック無し
  let g:syntastic_check_on_open=0
  " ファイル保存時にチェック
  let g:syntastic_check_on_save=1
  " ファイルクローズ時はエラーチェック無し
  let g:syntastic_check_on_wq=0
  " エラーのロケーションリストをオープン
  let g:syntastic_auto_loc_list=1
  " エラーメッセージウィンドウの高さ
  let g:syntastic_loc_list_height=7
  " エラーメッセージの書式
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➜'
  let g:gitgutter_sign_removed = '✘'
'''


[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
  \   'colorscheme': 'wombat'
  \ }
'''

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> <F2> :NERDTree<Cr>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \ "_" : {
    \ "hook/unite_quickfix/enable_failure" : 1,
    \ "hook/close_unite_quickfix/enable_hook_loaded" : 1,
    \ "hook/close_quickfix/enable_exit" : 1,
    \ "hook/close_buffer/enable_failure" : 1,
    \ "hook/close_buffer/enable_empty_data" : 1,
    \ "hook/inu/enable" : 1,
    \ "hook/inu/wait" : 20,
    \ "outputter" : "multi:buffer:quickfix",
    \ "outputter/buffer/split" : ":botright 5sp",
    \ "runner" : "vimproc",
    \ "runner/vimproc/updatetime" : 60,
    \ }
  \ }

  " Graphvizをコンパイルする
  if executable('dot')
    let g:quickrun_config['dot'] = {
      \ 'command' : 'dot',
      \ 'outputter' : 'error',
      \ 'outputter/error/error' : 'quickfix',
      \ 'cmdopt' : '-Tpdf -o ' . expand('%:r') . '.pdf',
    \ }
  endif

  " Processing
  if executable('processing-java')
    let g:quickrun_config.processing = {
      \ 'command': 'processing-java',
      \ 'exec': '%c --sketch=%s:p:h/ --output=/tmp/processing --run --force'
    \ }
  endif

  " LaTeX作成支援
  " latexmkがインストールされてるかどうか
  if executable('latexmk')
    " LaTeXでtexファイルからpdfを生成するコマンドを叩く際の設定ファイルが有るかどうか確認
    if !filereadable(expand('$HOME/.latexmkrc'))
      " 設定ファイルが無い場合生成して，設定内容を書込
      :let outputfile = '$HOME/.latexmkrc'
      :execute ':redir! > ' . outputfile
        :silent! echon "$latex = 'platex -synctex=1 -halt-on-error';" . "\n"
        :silent! echon "$latex_silent = 'platex -synctex=1 -halt-on-error -interaction=batchmode';" . "\n"
        :silent! echon "$bibtex = 'pbibtex';" . "\n"
        :silent! echon "$dvipdf = 'dvipdfmx %O -o %D %S';" . "\n"
        :silent! echon "$makeindex = 'mendex %O -o %D %S';" . "\n"
        :silent! echon "$pdf_mode = 3;" . "\n"
        :silent! echon "$pvc_view_file_via_temporary = 0;" . "\n"
      :redir END
    endif
  
    " texファイルをQuickRunでコンパイルする際の設定
    let g:quickrun_config['tex'] = {
      \ 'command' : 'latexmk',
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error' : 'quickfix',
      \ 'srcfile' : expand("%"),
      \ 'cmdopt': '-pdfdvi',
      \ 'hook/sweep/files' : [
        \ '%S:p:r.aux',
        \ '%S:p:r.bbl',
        \ '%S:p:r.blg',
        \ '%S:p:r.dvi',
        \ '%S:p:r.fdb_latexmk',
        \ '%S:p:r.fls',
        \ '%S:p:r.log',
        \ '%S:p:r.out',
        \ '%S:p:r.synctex.gz',
      \ ],
      \ 'exec': ['%c %o %a %s']
    \ }
  
    let g:quickrun_config.tmptex = {
      \ 'args' : expand("%:p:h:gs?\\\\?/?"),
      \ 'outputter' : 'error',
      \ 'outputter/error/error' : 'quickfix',
      \ 'hook/eval/enable' : 1,
      \ 'hook/eval/cd' : "%s:r",
      \ 'hook/eval/template' : '\documentclass{jsarticle}'
        \ .'\usepackage[dvipdfmx]{graphicx, hyperref}'
        \ .'\usepackage{amsmath,amssymb,amsthm}'
        \ .'\begin{document}'
        \ .'%s'
        \ .'\end{document}',
      \ 'hook/sweep/files' : [
        \ '%a/tmptex.latex',
        \ '%a/tmptex.out',
        \ '%a/tmptex.fdb_latexmk',
        \ '%a/tmptex.log',
        \ '%a/tmptex.aux',
        \ '%a/tmptex.dvi'
      \ ],
      \'exec' : [
        \ 'mv -fv `echo %s | sed -e s/\ /\\\\\\\\\ /g` `echo %a | sed -e s/\ /\\\\\\\\\ /g`/tmptex.latex',
        \ 'latexmk -pdfdvi -pv -output-directory=`echo %a | sed -e s/\ /\\\\\\\\\ /g` `echo %a | sed -e s/\ /\\\\\\\\\ /g`/tmptex.latex',
      \ ],
    \ }
  endif

  nnoremap <F5> :QuickRun 
  vnoremap <silent><buffer> <F5> :QuickRun -mode v -type tmptex<Cr>
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'osyo-manga/unite-quickfix'
hook_add = '''
  " QuickFixウィンドウでもプレビューや絞り込みを有効化
  let QFixWin_EnableMode = 1
  " QFixHowm/QFixGrepの結果表示にロケーションリストを使用する/しない
  let QFix_UseLocationList = 1
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'tyru/caw.vim.git'
